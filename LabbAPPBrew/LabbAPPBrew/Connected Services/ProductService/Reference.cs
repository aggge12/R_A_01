//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LabbAPPBrew.ProductService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/WcfProduct.Data")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LabbAPPBrew.ProductService.ProductHasAttribute[] attributeListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string categoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int categoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string groupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int groupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int typeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LabbAPPBrew.ProductService.ProductHasAttribute[] attributeList {
            get {
                return this.attributeListField;
            }
            set {
                if ((object.ReferenceEquals(this.attributeListField, value) != true)) {
                    this.attributeListField = value;
                    this.RaisePropertyChanged("attributeList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string category {
            get {
                return this.categoryField;
            }
            set {
                if ((object.ReferenceEquals(this.categoryField, value) != true)) {
                    this.categoryField = value;
                    this.RaisePropertyChanged("category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int categoryId {
            get {
                return this.categoryIdField;
            }
            set {
                if ((this.categoryIdField.Equals(value) != true)) {
                    this.categoryIdField = value;
                    this.RaisePropertyChanged("categoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string group {
            get {
                return this.groupField;
            }
            set {
                if ((object.ReferenceEquals(this.groupField, value) != true)) {
                    this.groupField = value;
                    this.RaisePropertyChanged("group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int groupId {
            get {
                return this.groupIdField;
            }
            set {
                if ((this.groupIdField.Equals(value) != true)) {
                    this.groupIdField = value;
                    this.RaisePropertyChanged("groupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int typeId {
            get {
                return this.typeIdField;
            }
            set {
                if ((this.typeIdField.Equals(value) != true)) {
                    this.typeIdField = value;
                    this.RaisePropertyChanged("typeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductHasAttribute", Namespace="http://schemas.datacontract.org/2004/07/WcfProduct.Data")]
    [System.SerializableAttribute()]
    public partial class ProductHasAttribute : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int attributeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int productIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string valueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int attributeId {
            get {
                return this.attributeIdField;
            }
            set {
                if ((this.attributeIdField.Equals(value) != true)) {
                    this.attributeIdField = value;
                    this.RaisePropertyChanged("attributeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int productId {
            get {
                return this.productIdField;
            }
            set {
                if ((this.productIdField.Equals(value) != true)) {
                    this.productIdField = value;
                    this.RaisePropertyChanged("productId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string value {
            get {
                return this.valueField;
            }
            set {
                if ((object.ReferenceEquals(this.valueField, value) != true)) {
                    this.valueField = value;
                    this.RaisePropertyChanged("value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductAtBusiness", Namespace="http://schemas.datacontract.org/2004/07/WcfProduct.Data")]
    [System.SerializableAttribute()]
    public partial class ProductAtBusiness : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LabbAPPBrew.ProductService.ProductHasAttribute[] attributeListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string categoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int categoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string groupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int groupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LabbAPPBrew.ProductService.PriceReport[] latestPricesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int typeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal unverifiedPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal verifiedPriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LabbAPPBrew.ProductService.ProductHasAttribute[] attributeList {
            get {
                return this.attributeListField;
            }
            set {
                if ((object.ReferenceEquals(this.attributeListField, value) != true)) {
                    this.attributeListField = value;
                    this.RaisePropertyChanged("attributeList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string category {
            get {
                return this.categoryField;
            }
            set {
                if ((object.ReferenceEquals(this.categoryField, value) != true)) {
                    this.categoryField = value;
                    this.RaisePropertyChanged("category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int categoryId {
            get {
                return this.categoryIdField;
            }
            set {
                if ((this.categoryIdField.Equals(value) != true)) {
                    this.categoryIdField = value;
                    this.RaisePropertyChanged("categoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string group {
            get {
                return this.groupField;
            }
            set {
                if ((object.ReferenceEquals(this.groupField, value) != true)) {
                    this.groupField = value;
                    this.RaisePropertyChanged("group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int groupId {
            get {
                return this.groupIdField;
            }
            set {
                if ((this.groupIdField.Equals(value) != true)) {
                    this.groupIdField = value;
                    this.RaisePropertyChanged("groupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LabbAPPBrew.ProductService.PriceReport[] latestPrices {
            get {
                return this.latestPricesField;
            }
            set {
                if ((object.ReferenceEquals(this.latestPricesField, value) != true)) {
                    this.latestPricesField = value;
                    this.RaisePropertyChanged("latestPrices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int typeId {
            get {
                return this.typeIdField;
            }
            set {
                if ((this.typeIdField.Equals(value) != true)) {
                    this.typeIdField = value;
                    this.RaisePropertyChanged("typeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal unverifiedPrice {
            get {
                return this.unverifiedPriceField;
            }
            set {
                if ((this.unverifiedPriceField.Equals(value) != true)) {
                    this.unverifiedPriceField = value;
                    this.RaisePropertyChanged("unverifiedPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal verifiedPrice {
            get {
                return this.verifiedPriceField;
            }
            set {
                if ((this.verifiedPriceField.Equals(value) != true)) {
                    this.verifiedPriceField = value;
                    this.RaisePropertyChanged("verifiedPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceReport", Namespace="http://schemas.datacontract.org/2004/07/WcfProduct.Data")]
    [System.SerializableAttribute()]
    public partial class PriceReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OccurrenceDTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int businessIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int productIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OccurrenceDT {
            get {
                return this.OccurrenceDTField;
            }
            set {
                if ((this.OccurrenceDTField.Equals(value) != true)) {
                    this.OccurrenceDTField = value;
                    this.RaisePropertyChanged("OccurrenceDT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int businessId {
            get {
                return this.businessIdField;
            }
            set {
                if ((this.businessIdField.Equals(value) != true)) {
                    this.businessIdField = value;
                    this.RaisePropertyChanged("businessId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int productId {
            get {
                return this.productIdField;
            }
            set {
                if ((this.productIdField.Equals(value) != true)) {
                    this.productIdField = value;
                    this.RaisePropertyChanged("productId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userId {
            get {
                return this.userIdField;
            }
            set {
                if ((this.userIdField.Equals(value) != true)) {
                    this.userIdField = value;
                    this.RaisePropertyChanged("userId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userType {
            get {
                return this.userTypeField;
            }
            set {
                if ((this.userTypeField.Equals(value) != true)) {
                    this.userTypeField = value;
                    this.RaisePropertyChanged("userType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/WcfProduct.Data")]
    [System.SerializableAttribute()]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/WcfProduct.Data")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int groupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int groupId {
            get {
                return this.groupIdField;
            }
            set {
                if ((this.groupIdField.Equals(value) != true)) {
                    this.groupIdField = value;
                    this.RaisePropertyChanged("groupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Type", Namespace="http://schemas.datacontract.org/2004/07/WcfProduct.Data")]
    [System.SerializableAttribute()]
    public partial class Type : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int categoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int categoryId {
            get {
                return this.categoryIdField;
            }
            set {
                if ((this.categoryIdField.Equals(value) != true)) {
                    this.categoryIdField = value;
                    this.RaisePropertyChanged("categoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Attribute", Namespace="http://schemas.datacontract.org/2004/07/WcfProduct.Data")]
    [System.SerializableAttribute()]
    public partial class Attribute : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductService.IProductService")]
    public interface IProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllProducts", ReplyAction="http://tempuri.org/IProductService/GetAllProductsResponse")]
        LabbAPPBrew.ProductService.Product[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllProducts", ReplyAction="http://tempuri.org/IProductService/GetAllProductsResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Product[]> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductDetails", ReplyAction="http://tempuri.org/IProductService/GetProductDetailsResponse")]
        LabbAPPBrew.ProductService.Product GetProductDetails(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductDetails", ReplyAction="http://tempuri.org/IProductService/GetProductDetailsResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Product> GetProductDetailsAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsAtBusiness", ReplyAction="http://tempuri.org/IProductService/GetProductsAtBusinessResponse")]
        LabbAPPBrew.ProductService.ProductAtBusiness[] GetProductsAtBusiness(int businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsAtBusiness", ReplyAction="http://tempuri.org/IProductService/GetProductsAtBusinessResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.ProductAtBusiness[]> GetProductsAtBusinessAsync(int businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetPricesFromProduct", ReplyAction="http://tempuri.org/IProductService/GetPricesFromProductResponse")]
        LabbAPPBrew.ProductService.PriceReport[] GetPricesFromProduct(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetPricesFromProduct", ReplyAction="http://tempuri.org/IProductService/GetPricesFromProductResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.PriceReport[]> GetPricesFromProductAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetPricesFromProductAtBusiness", ReplyAction="http://tempuri.org/IProductService/GetPricesFromProductAtBusinessResponse")]
        LabbAPPBrew.ProductService.PriceReport[] GetPricesFromProductAtBusiness(int productId, int businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetPricesFromProductAtBusiness", ReplyAction="http://tempuri.org/IProductService/GetPricesFromProductAtBusinessResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.PriceReport[]> GetPricesFromProductAtBusinessAsync(int productId, int businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductGroups", ReplyAction="http://tempuri.org/IProductService/GetProductGroupsResponse")]
        LabbAPPBrew.ProductService.Group[] GetProductGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductGroups", ReplyAction="http://tempuri.org/IProductService/GetProductGroupsResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Group[]> GetProductGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductCategories", ReplyAction="http://tempuri.org/IProductService/GetProductCategoriesResponse")]
        LabbAPPBrew.ProductService.Category[] GetProductCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductCategories", ReplyAction="http://tempuri.org/IProductService/GetProductCategoriesResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Category[]> GetProductCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductTypes", ReplyAction="http://tempuri.org/IProductService/GetProductTypesResponse")]
        LabbAPPBrew.ProductService.Type[] GetProductTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductTypes", ReplyAction="http://tempuri.org/IProductService/GetProductTypesResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Type[]> GetProductTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/ReportPrice", ReplyAction="http://tempuri.org/IProductService/ReportPriceResponse")]
        bool ReportPrice(LabbAPPBrew.ProductService.PriceReport priceReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/ReportPrice", ReplyAction="http://tempuri.org/IProductService/ReportPriceResponse")]
        System.Threading.Tasks.Task<bool> ReportPriceAsync(LabbAPPBrew.ProductService.PriceReport priceReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/ReportPriceReturnObject", ReplyAction="http://tempuri.org/IProductService/ReportPriceReturnObjectResponse")]
        LabbAPPBrew.ProductService.PriceReport ReportPriceReturnObject(LabbAPPBrew.ProductService.PriceReport priceReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/ReportPriceReturnObject", ReplyAction="http://tempuri.org/IProductService/ReportPriceReturnObjectResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.PriceReport> ReportPriceReturnObjectAsync(LabbAPPBrew.ProductService.PriceReport priceReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetPriceReportDetails", ReplyAction="http://tempuri.org/IProductService/GetPriceReportDetailsResponse")]
        LabbAPPBrew.ProductService.PriceReport GetPriceReportDetails(int reportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetPriceReportDetails", ReplyAction="http://tempuri.org/IProductService/GetPriceReportDetailsResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.PriceReport> GetPriceReportDetailsAsync(int reportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdatePriceReport", ReplyAction="http://tempuri.org/IProductService/UpdatePriceReportResponse")]
        bool UpdatePriceReport(LabbAPPBrew.ProductService.PriceReport priceReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdatePriceReport", ReplyAction="http://tempuri.org/IProductService/UpdatePriceReportResponse")]
        System.Threading.Tasks.Task<bool> UpdatePriceReportAsync(LabbAPPBrew.ProductService.PriceReport priceReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeletePriceReport", ReplyAction="http://tempuri.org/IProductService/DeletePriceReportResponse")]
        bool DeletePriceReport(int reportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeletePriceReport", ReplyAction="http://tempuri.org/IProductService/DeletePriceReportResponse")]
        System.Threading.Tasks.Task<bool> DeletePriceReportAsync(int reportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/CreateProduct", ReplyAction="http://tempuri.org/IProductService/CreateProductResponse")]
        void CreateProduct(LabbAPPBrew.ProductService.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/CreateProduct", ReplyAction="http://tempuri.org/IProductService/CreateProductResponse")]
        System.Threading.Tasks.Task CreateProductAsync(LabbAPPBrew.ProductService.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        void UpdateProduct(LabbAPPBrew.ProductService.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        System.Threading.Tasks.Task UpdateProductAsync(LabbAPPBrew.ProductService.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        void DeleteProduct(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        System.Threading.Tasks.Task DeleteProductAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllGroups", ReplyAction="http://tempuri.org/IProductService/GetAllGroupsResponse")]
        LabbAPPBrew.ProductService.Group[] GetAllGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllGroups", ReplyAction="http://tempuri.org/IProductService/GetAllGroupsResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Group[]> GetAllGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/CreateGroup", ReplyAction="http://tempuri.org/IProductService/CreateGroupResponse")]
        LabbAPPBrew.ProductService.Group CreateGroup(LabbAPPBrew.ProductService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/CreateGroup", ReplyAction="http://tempuri.org/IProductService/CreateGroupResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Group> CreateGroupAsync(LabbAPPBrew.ProductService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetGroupDetails", ReplyAction="http://tempuri.org/IProductService/GetGroupDetailsResponse")]
        LabbAPPBrew.ProductService.Group GetGroupDetails(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetGroupDetails", ReplyAction="http://tempuri.org/IProductService/GetGroupDetailsResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Group> GetGroupDetailsAsync(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateGroup", ReplyAction="http://tempuri.org/IProductService/UpdateGroupResponse")]
        bool UpdateGroup(LabbAPPBrew.ProductService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateGroup", ReplyAction="http://tempuri.org/IProductService/UpdateGroupResponse")]
        System.Threading.Tasks.Task<bool> UpdateGroupAsync(LabbAPPBrew.ProductService.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteGroup", ReplyAction="http://tempuri.org/IProductService/DeleteGroupResponse")]
        bool DeleteGroup(int GroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteGroup", ReplyAction="http://tempuri.org/IProductService/DeleteGroupResponse")]
        System.Threading.Tasks.Task<bool> DeleteGroupAsync(int GroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllCategories", ReplyAction="http://tempuri.org/IProductService/GetAllCategoriesResponse")]
        LabbAPPBrew.ProductService.Category[] GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllCategories", ReplyAction="http://tempuri.org/IProductService/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Category[]> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/CreateCategory", ReplyAction="http://tempuri.org/IProductService/CreateCategoryResponse")]
        LabbAPPBrew.ProductService.Category CreateCategory(LabbAPPBrew.ProductService.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/CreateCategory", ReplyAction="http://tempuri.org/IProductService/CreateCategoryResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Category> CreateCategoryAsync(LabbAPPBrew.ProductService.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetCategoryDetails", ReplyAction="http://tempuri.org/IProductService/GetCategoryDetailsResponse")]
        LabbAPPBrew.ProductService.Category GetCategoryDetails(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetCategoryDetails", ReplyAction="http://tempuri.org/IProductService/GetCategoryDetailsResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Category> GetCategoryDetailsAsync(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateCategory", ReplyAction="http://tempuri.org/IProductService/UpdateCategoryResponse")]
        bool UpdateCategory(LabbAPPBrew.ProductService.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateCategory", ReplyAction="http://tempuri.org/IProductService/UpdateCategoryResponse")]
        System.Threading.Tasks.Task<bool> UpdateCategoryAsync(LabbAPPBrew.ProductService.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteCategory", ReplyAction="http://tempuri.org/IProductService/DeleteCategoryResponse")]
        bool DeleteCategory(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteCategory", ReplyAction="http://tempuri.org/IProductService/DeleteCategoryResponse")]
        System.Threading.Tasks.Task<bool> DeleteCategoryAsync(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllTypes", ReplyAction="http://tempuri.org/IProductService/GetAllTypesResponse")]
        LabbAPPBrew.ProductService.Type[] GetAllTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllTypes", ReplyAction="http://tempuri.org/IProductService/GetAllTypesResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Type[]> GetAllTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/CreateType", ReplyAction="http://tempuri.org/IProductService/CreateTypeResponse")]
        LabbAPPBrew.ProductService.Type CreateType(LabbAPPBrew.ProductService.Type type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/CreateType", ReplyAction="http://tempuri.org/IProductService/CreateTypeResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Type> CreateTypeAsync(LabbAPPBrew.ProductService.Type type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetTypeDetails", ReplyAction="http://tempuri.org/IProductService/GetTypeDetailsResponse")]
        LabbAPPBrew.ProductService.Type GetTypeDetails(int typeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetTypeDetails", ReplyAction="http://tempuri.org/IProductService/GetTypeDetailsResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Type> GetTypeDetailsAsync(int typeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateType", ReplyAction="http://tempuri.org/IProductService/UpdateTypeResponse")]
        bool UpdateType(LabbAPPBrew.ProductService.Type type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateType", ReplyAction="http://tempuri.org/IProductService/UpdateTypeResponse")]
        System.Threading.Tasks.Task<bool> UpdateTypeAsync(LabbAPPBrew.ProductService.Type type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteType", ReplyAction="http://tempuri.org/IProductService/DeleteTypeResponse")]
        bool DeleteType(int typeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteType", ReplyAction="http://tempuri.org/IProductService/DeleteTypeResponse")]
        System.Threading.Tasks.Task<bool> DeleteTypeAsync(int typeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllAttributes", ReplyAction="http://tempuri.org/IProductService/GetAllAttributesResponse")]
        LabbAPPBrew.ProductService.Attribute[] GetAllAttributes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllAttributes", ReplyAction="http://tempuri.org/IProductService/GetAllAttributesResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Attribute[]> GetAllAttributesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAttributeName", ReplyAction="http://tempuri.org/IProductService/GetAttributeNameResponse")]
        string GetAttributeName(int attributeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAttributeName", ReplyAction="http://tempuri.org/IProductService/GetAttributeNameResponse")]
        System.Threading.Tasks.Task<string> GetAttributeNameAsync(int attributeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAttributeDetails", ReplyAction="http://tempuri.org/IProductService/GetAttributeDetailsResponse")]
        LabbAPPBrew.ProductService.Attribute GetAttributeDetails(int attributeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAttributeDetails", ReplyAction="http://tempuri.org/IProductService/GetAttributeDetailsResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Attribute> GetAttributeDetailsAsync(int attributeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateAttribute", ReplyAction="http://tempuri.org/IProductService/UpdateAttributeResponse")]
        bool UpdateAttribute(LabbAPPBrew.ProductService.Attribute attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateAttribute", ReplyAction="http://tempuri.org/IProductService/UpdateAttributeResponse")]
        System.Threading.Tasks.Task<bool> UpdateAttributeAsync(LabbAPPBrew.ProductService.Attribute attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteAttribute", ReplyAction="http://tempuri.org/IProductService/DeleteAttributeResponse")]
        bool DeleteAttribute(int attributeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteAttribute", ReplyAction="http://tempuri.org/IProductService/DeleteAttributeResponse")]
        System.Threading.Tasks.Task<bool> DeleteAttributeAsync(int attributeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/CreateAttribute", ReplyAction="http://tempuri.org/IProductService/CreateAttributeResponse")]
        LabbAPPBrew.ProductService.Attribute CreateAttribute(LabbAPPBrew.ProductService.Attribute attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/CreateAttribute", ReplyAction="http://tempuri.org/IProductService/CreateAttributeResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Attribute> CreateAttributeAsync(LabbAPPBrew.ProductService.Attribute attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllPrices", ReplyAction="http://tempuri.org/IProductService/GetAllPricesResponse")]
        LabbAPPBrew.ProductService.PriceReport[] GetAllPrices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllPrices", ReplyAction="http://tempuri.org/IProductService/GetAllPricesResponse")]
        System.Threading.Tasks.Task<LabbAPPBrew.ProductService.PriceReport[]> GetAllPricesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DoILive", ReplyAction="http://tempuri.org/IProductService/DoILiveResponse")]
        string DoILive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DoILive", ReplyAction="http://tempuri.org/IProductService/DoILiveResponse")]
        System.Threading.Tasks.Task<string> DoILiveAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductServiceChannel : LabbAPPBrew.ProductService.IProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<LabbAPPBrew.ProductService.IProductService>, LabbAPPBrew.ProductService.IProductService {
        
        public ProductServiceClient() {
        }
        
        public ProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LabbAPPBrew.ProductService.Product[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Product[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public LabbAPPBrew.ProductService.Product GetProductDetails(int productId) {
            return base.Channel.GetProductDetails(productId);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Product> GetProductDetailsAsync(int productId) {
            return base.Channel.GetProductDetailsAsync(productId);
        }
        
        public LabbAPPBrew.ProductService.ProductAtBusiness[] GetProductsAtBusiness(int businessId) {
            return base.Channel.GetProductsAtBusiness(businessId);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.ProductAtBusiness[]> GetProductsAtBusinessAsync(int businessId) {
            return base.Channel.GetProductsAtBusinessAsync(businessId);
        }
        
        public LabbAPPBrew.ProductService.PriceReport[] GetPricesFromProduct(int productId) {
            return base.Channel.GetPricesFromProduct(productId);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.PriceReport[]> GetPricesFromProductAsync(int productId) {
            return base.Channel.GetPricesFromProductAsync(productId);
        }
        
        public LabbAPPBrew.ProductService.PriceReport[] GetPricesFromProductAtBusiness(int productId, int businessId) {
            return base.Channel.GetPricesFromProductAtBusiness(productId, businessId);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.PriceReport[]> GetPricesFromProductAtBusinessAsync(int productId, int businessId) {
            return base.Channel.GetPricesFromProductAtBusinessAsync(productId, businessId);
        }
        
        public LabbAPPBrew.ProductService.Group[] GetProductGroups() {
            return base.Channel.GetProductGroups();
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Group[]> GetProductGroupsAsync() {
            return base.Channel.GetProductGroupsAsync();
        }
        
        public LabbAPPBrew.ProductService.Category[] GetProductCategories() {
            return base.Channel.GetProductCategories();
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Category[]> GetProductCategoriesAsync() {
            return base.Channel.GetProductCategoriesAsync();
        }
        
        public LabbAPPBrew.ProductService.Type[] GetProductTypes() {
            return base.Channel.GetProductTypes();
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Type[]> GetProductTypesAsync() {
            return base.Channel.GetProductTypesAsync();
        }
        
        public bool ReportPrice(LabbAPPBrew.ProductService.PriceReport priceReport) {
            return base.Channel.ReportPrice(priceReport);
        }
        
        public System.Threading.Tasks.Task<bool> ReportPriceAsync(LabbAPPBrew.ProductService.PriceReport priceReport) {
            return base.Channel.ReportPriceAsync(priceReport);
        }
        
        public LabbAPPBrew.ProductService.PriceReport ReportPriceReturnObject(LabbAPPBrew.ProductService.PriceReport priceReport) {
            return base.Channel.ReportPriceReturnObject(priceReport);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.PriceReport> ReportPriceReturnObjectAsync(LabbAPPBrew.ProductService.PriceReport priceReport) {
            return base.Channel.ReportPriceReturnObjectAsync(priceReport);
        }
        
        public LabbAPPBrew.ProductService.PriceReport GetPriceReportDetails(int reportId) {
            return base.Channel.GetPriceReportDetails(reportId);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.PriceReport> GetPriceReportDetailsAsync(int reportId) {
            return base.Channel.GetPriceReportDetailsAsync(reportId);
        }
        
        public bool UpdatePriceReport(LabbAPPBrew.ProductService.PriceReport priceReport) {
            return base.Channel.UpdatePriceReport(priceReport);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePriceReportAsync(LabbAPPBrew.ProductService.PriceReport priceReport) {
            return base.Channel.UpdatePriceReportAsync(priceReport);
        }
        
        public bool DeletePriceReport(int reportId) {
            return base.Channel.DeletePriceReport(reportId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePriceReportAsync(int reportId) {
            return base.Channel.DeletePriceReportAsync(reportId);
        }
        
        public void CreateProduct(LabbAPPBrew.ProductService.Product product) {
            base.Channel.CreateProduct(product);
        }
        
        public System.Threading.Tasks.Task CreateProductAsync(LabbAPPBrew.ProductService.Product product) {
            return base.Channel.CreateProductAsync(product);
        }
        
        public void UpdateProduct(LabbAPPBrew.ProductService.Product product) {
            base.Channel.UpdateProduct(product);
        }
        
        public System.Threading.Tasks.Task UpdateProductAsync(LabbAPPBrew.ProductService.Product product) {
            return base.Channel.UpdateProductAsync(product);
        }
        
        public void DeleteProduct(int productId) {
            base.Channel.DeleteProduct(productId);
        }
        
        public System.Threading.Tasks.Task DeleteProductAsync(int productId) {
            return base.Channel.DeleteProductAsync(productId);
        }
        
        public LabbAPPBrew.ProductService.Group[] GetAllGroups() {
            return base.Channel.GetAllGroups();
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Group[]> GetAllGroupsAsync() {
            return base.Channel.GetAllGroupsAsync();
        }
        
        public LabbAPPBrew.ProductService.Group CreateGroup(LabbAPPBrew.ProductService.Group group) {
            return base.Channel.CreateGroup(group);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Group> CreateGroupAsync(LabbAPPBrew.ProductService.Group group) {
            return base.Channel.CreateGroupAsync(group);
        }
        
        public LabbAPPBrew.ProductService.Group GetGroupDetails(int groupId) {
            return base.Channel.GetGroupDetails(groupId);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Group> GetGroupDetailsAsync(int groupId) {
            return base.Channel.GetGroupDetailsAsync(groupId);
        }
        
        public bool UpdateGroup(LabbAPPBrew.ProductService.Group group) {
            return base.Channel.UpdateGroup(group);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateGroupAsync(LabbAPPBrew.ProductService.Group group) {
            return base.Channel.UpdateGroupAsync(group);
        }
        
        public bool DeleteGroup(int GroupId) {
            return base.Channel.DeleteGroup(GroupId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteGroupAsync(int GroupId) {
            return base.Channel.DeleteGroupAsync(GroupId);
        }
        
        public LabbAPPBrew.ProductService.Category[] GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Category[]> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public LabbAPPBrew.ProductService.Category CreateCategory(LabbAPPBrew.ProductService.Category category) {
            return base.Channel.CreateCategory(category);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Category> CreateCategoryAsync(LabbAPPBrew.ProductService.Category category) {
            return base.Channel.CreateCategoryAsync(category);
        }
        
        public LabbAPPBrew.ProductService.Category GetCategoryDetails(int categoryId) {
            return base.Channel.GetCategoryDetails(categoryId);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Category> GetCategoryDetailsAsync(int categoryId) {
            return base.Channel.GetCategoryDetailsAsync(categoryId);
        }
        
        public bool UpdateCategory(LabbAPPBrew.ProductService.Category category) {
            return base.Channel.UpdateCategory(category);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCategoryAsync(LabbAPPBrew.ProductService.Category category) {
            return base.Channel.UpdateCategoryAsync(category);
        }
        
        public bool DeleteCategory(int categoryId) {
            return base.Channel.DeleteCategory(categoryId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCategoryAsync(int categoryId) {
            return base.Channel.DeleteCategoryAsync(categoryId);
        }
        
        public LabbAPPBrew.ProductService.Type[] GetAllTypes() {
            return base.Channel.GetAllTypes();
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Type[]> GetAllTypesAsync() {
            return base.Channel.GetAllTypesAsync();
        }
        
        public LabbAPPBrew.ProductService.Type CreateType(LabbAPPBrew.ProductService.Type type) {
            return base.Channel.CreateType(type);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Type> CreateTypeAsync(LabbAPPBrew.ProductService.Type type) {
            return base.Channel.CreateTypeAsync(type);
        }
        
        public LabbAPPBrew.ProductService.Type GetTypeDetails(int typeId) {
            return base.Channel.GetTypeDetails(typeId);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Type> GetTypeDetailsAsync(int typeId) {
            return base.Channel.GetTypeDetailsAsync(typeId);
        }
        
        public bool UpdateType(LabbAPPBrew.ProductService.Type type) {
            return base.Channel.UpdateType(type);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTypeAsync(LabbAPPBrew.ProductService.Type type) {
            return base.Channel.UpdateTypeAsync(type);
        }
        
        public bool DeleteType(int typeId) {
            return base.Channel.DeleteType(typeId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTypeAsync(int typeId) {
            return base.Channel.DeleteTypeAsync(typeId);
        }
        
        public LabbAPPBrew.ProductService.Attribute[] GetAllAttributes() {
            return base.Channel.GetAllAttributes();
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Attribute[]> GetAllAttributesAsync() {
            return base.Channel.GetAllAttributesAsync();
        }
        
        public string GetAttributeName(int attributeId) {
            return base.Channel.GetAttributeName(attributeId);
        }
        
        public System.Threading.Tasks.Task<string> GetAttributeNameAsync(int attributeId) {
            return base.Channel.GetAttributeNameAsync(attributeId);
        }
        
        public LabbAPPBrew.ProductService.Attribute GetAttributeDetails(int attributeId) {
            return base.Channel.GetAttributeDetails(attributeId);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Attribute> GetAttributeDetailsAsync(int attributeId) {
            return base.Channel.GetAttributeDetailsAsync(attributeId);
        }
        
        public bool UpdateAttribute(LabbAPPBrew.ProductService.Attribute attribute) {
            return base.Channel.UpdateAttribute(attribute);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAttributeAsync(LabbAPPBrew.ProductService.Attribute attribute) {
            return base.Channel.UpdateAttributeAsync(attribute);
        }
        
        public bool DeleteAttribute(int attributeId) {
            return base.Channel.DeleteAttribute(attributeId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAttributeAsync(int attributeId) {
            return base.Channel.DeleteAttributeAsync(attributeId);
        }
        
        public LabbAPPBrew.ProductService.Attribute CreateAttribute(LabbAPPBrew.ProductService.Attribute attribute) {
            return base.Channel.CreateAttribute(attribute);
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.Attribute> CreateAttributeAsync(LabbAPPBrew.ProductService.Attribute attribute) {
            return base.Channel.CreateAttributeAsync(attribute);
        }
        
        public LabbAPPBrew.ProductService.PriceReport[] GetAllPrices() {
            return base.Channel.GetAllPrices();
        }
        
        public System.Threading.Tasks.Task<LabbAPPBrew.ProductService.PriceReport[]> GetAllPricesAsync() {
            return base.Channel.GetAllPricesAsync();
        }
        
        public string DoILive() {
            return base.Channel.DoILive();
        }
        
        public System.Threading.Tasks.Task<string> DoILiveAsync() {
            return base.Channel.DoILiveAsync();
        }
    }
}
